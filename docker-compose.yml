services:
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MONGODB_URI=mongodb://mongodb:27017/
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 10s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  load_generator:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    command: python -m api.load_generator
    depends_on:
      api:
        condition: service_healthy
    networks:
      - monitoring_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - monitoring_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "echo mntr | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - monitoring_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  loki:
    image: grafana/loki:2.4.0
    user: "0"
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki:/etc/loki
      - loki-data:/loki
    networks:
      - monitoring_network
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      api:
        condition: service_healthy
      loki:
        condition: service_healthy
      prometheus:
        condition: service_started
      mongodb:
        condition: service_started
    networks:
      - monitoring_network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - monitoring_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  mongodb_exporter:
    image: percona/mongodb_exporter:0.40
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
    ports:
      - "9216:9216"
    depends_on:
      mongodb:
        condition: service_started
    networks:
      - monitoring_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  log_consumer:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    command: python -m api.kafka_consumer
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - monitoring_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./config/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      kafka:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - monitoring_network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

networks:
  monitoring_network:
    driver: bridge

volumes:
  mongodb-data:
  prometheus-data:
  grafana-data:
  loki-data:
